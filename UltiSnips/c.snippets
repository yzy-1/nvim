snippet #inc< "#include <...>" b
#include <${VISUAL}$0>
endsnippet

snippet #inc "#include ..." b
#include "${VISUAL}$0"
endsnippet

snippet #def "#define ..." b
#define ${VISUAL}$0
endsnippet

snippet un "using namespace ..." b
using namespace ${VISUAL}$0;
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif" b
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}

${VISUAL}$0

#endif // ifndef $1
endsnippet

snippet main "main function"
int main(int argc, char *argv[]) {
	${VISUAL}$0
	return 0;
}
endsnippet

snippet for "for loop"
for (size_t ${1:i} = ${2:0}; $1 < ${3:count}; $1++) {
	${VISUAL}$0
}
endsnippet

snippet fore "for loop empty"
for ($1) {
	${VISUAL}$0
}
endsnippet

snippet forr "for loop reverse"
for (int ${1:i} = ${2:count - 1}; $1 >= ${3:0}; $1--) {
	${VISUAL}$0
}
endsnippet

snippet if "if (...)"
if (${1:expression}) {
	${VISUAL}$0
}
endsnippet

snippet else "else" 
else {
	${VISUAL}$0
}
endsnippet

snippet elseif "else if (...)"
else if (${1:expression}) {
	${VISUAL}$0
}
endsnippet

snippet while "while loop"
while (${1:expression}) {
	${VISUAL}$0
}
endsnippet

snippet do "do while loop"
do {
	${VISUAL}$0
} while (${1:expression});
endsnippet

snippet func "function"
${1:void} ${2:FunctionName}($3) {
	${VISUAL}$0
}
endsnippet

snippet fund "function declaration"
${1:void} ${2:FunctionName}($3);
endsnippet

snippet fprintf "fprintf(...)"
fprintf(${1:stderr}, "${2:%s}"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet printf "printf(...)"
printf("${1:%s}"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet struct "struct ..."
struct ${1:`!p snip.rv = (snip.basename or "name")`} {
	${0:/* data */}
};
endsnippet

snippet inc "#include ..." b
#include ${1:"header"}$0
endsnippet

snippet sif "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet

snippet def "#define ..." b
#define ${1:SYMBOL}$0
endsnippet

snippet ifndef "#ifndef ... #define ... #endif" b
#ifndef ${1:`!p
import string, re
name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
snip.rv = ('%s_' % (name)).upper()
`}
#define ${1:SYMBOL} ${2:value}

${VISUAL}$0

#endif // ifndef $1
endsnippet

snippet main "Main function"
int main(const int argsLength, const char *args[]) {
	${0:// Code here}
	return 0;
}
endsnippet

snippet for "for loop"
for (int ${1:i} = ${2:0}; $1 < ${3:length}; ++$1) {
	${VISUAL}${4:// Code Here}
}$0
endsnippet

snippet forle "for loop le"
for (int ${1:i} = ${2:1}; $1 <= ${3:length}; ++$1) {
	${VISUAL}$4
}$0
endsnippet

snippet fore "empty for loop"
for ($1) {
	${VISUAL}${2:// Code here}
}$0
endsnippet

snippet forr "for loop reverse"
for (int ${1:i} = ${2:length - 1}; $1 >= ${3:0}; --$1) {
	${VISUAL}${4:// Code here}
}$0
endsnippet

snippet if "if (...)"
if (${1:expression}) {
	${VISUAL}${2:// Code here}
}$0
endsnippet

snippet else "else"
else {
	${VISUAL}${1:// Code here}
}$0
endsnippet

snippet elseif "else if (...)"
else if (${1:expression}) {
	${VISUAL}${2:// Code here}
}$0
endsnippet

snippet while "while loop"
while (${1:expression}) {
	${VISUAL}${2:// Code here}
}$0
endsnippet

snippet do "do while loop"
do {
	${VISUAL}${0:// Code here}
} while (${1:expression});
endsnippet

snippet func "function"
${1:void} ${2:FunctionName}($3) {
	${VISUAL}${0:// Code here}
}
endsnippet

snippet fund "function declaration"
${1:void} ${2:FunctionName}($3);
endsnippet

snippet struct "struct ..."
struct ${1:StructName} {
	${0:/* data */}
};
endsnippet

snippet union "union ..."
union ${1:UnionName} {
	${0:/* data */}
};
endsnippet

snippet fin "freopen("...in", "r", stdin)" b
freopen("$1.in", "r", stdin)
endsnippet

snippet fout "freopen("...out", "r", stdout)" b
freopen("$1.out", "w", stdout)
endsnippet

snippet O3 "Description" b
#pragma GCC optimize(1)
#pragma GCC optimize(2)
#pragma GCC optimize(3)
#pragma GCC optimize("Ofast")
#pragma GCC optimize("inline")
#pragma GCC optimize("-fgcse")
#pragma GCC optimize("-fgcse-lm")
#pragma GCC optimize("-fipa-sra")
#pragma GCC optimize("-ftree-pre")
#pragma GCC optimize("-ftree-vrp")
#pragma GCC optimize("-fpeephole2")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-fsched-spec")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("-falign-jumps")
#pragma GCC optimize("-falign-loops")
#pragma GCC optimize("-falign-labels")
#pragma GCC optimize("-fdevirtualize")
#pragma GCC optimize("-fcaller-saves")
#pragma GCC optimize("-fcrossjumping")
#pragma GCC optimize("-fthread-jumps")
#pragma GCC optimize("-funroll-loops")
#pragma GCC optimize("-freorder-blocks")
#pragma GCC optimize("-fschedule-insns")
#pragma GCC optimize("inline-functions")
#pragma GCC optimize("-ftree-tail-merge")
#pragma GCC optimize("-fschedule-insns2")
#pragma GCC optimize("-fstrict-aliasing")
#pragma GCC optimize("-falign-functions")
#pragma GCC optimize("-fcse-follow-jumps")
#pragma GCC optimize("-fpartial-inlining")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("-freorder-functions")
#pragma GCC optimize("-findirect-inlining")
#pragma GCC optimize("-fhoist-adjacent-loads")
#pragma GCC optimize("-frerun-cse-after-loop")
#pragma GCC optimize("inline-small-functions")
#pragma GCC optimize("-finline-small-functions")
#pragma GCC optimize("-ftree-switch-conversion")
#pragma GCC optimize("-foptimize-sibling-calls")
#pragma GCC optimize("-fexpensive-optimizations")
#pragma GCC optimize("inline-functions-called-once")
endsnippet

snippet maxn "const long long N = ..."
const long long N = ${1:1e6 + 5};$0
endsnippet

snippet printf "printf(...)"
printf("$1", $2)$0
endsnippet

snippet puts "puts(...)"
puts($1)$0
endsnippet

snippet scanf "scanf(...)"
scanf("$1", $2)$0
endsnippet

snippet i3 "int32" w
int32_t
endsnippet

snippet i6 "int64" w
int64_t
endsnippet

snippet u3 "uint32" w
uint32_t
endsnippet

snippet u6 "uint64" w
uint64_t
endsnippet

snippet f3 "float32" w
float
endsnippet

snippet f6 "float64" w
double
endsnippet

snippet "(\w+)\.p" "print" ir
Print(`!p snip.rv = match.group(1)`)$0
endsnippet

snippet "(\w+)\.r" "read" ir
Read(&`!p snip.rv = match.group(1)`)$0
endsnippet

snippet "(\w+)\.for" "for 0...k-1" ir
for (int ${1:i} = 0; $1 < `!p snip.rv = match.group(1)`; ++$1) {
	${2:// Code here}
}$0
endsnippet

snippet "(\w+)\.forle" "for 1...k" ir
for (int ${1:i} = 1; $1 <= `!p snip.rv = match.group(1)`; ++$1) {
	${2:// Code here}
}$0
endsnippet

snippet "(\d+)\.for" "for 0...k-1" ir
for (int ${1:i} = 0; $1 < `!p snip.rv = match.group(1)`; ++$1) {
	${2:// Code here}
}$0
endsnippet

snippet "(\d+)\.forle" "for 1...k" ir
for (int ${1:i} = 1; $1 <= `!p snip.rv = match.group(1)`; ++$1) {
	${2:// Code here}
}$0
endsnippet

snippet endl "putchar \n"
putchar('\n')
endsnippet

snippet ends "putchar %space"
putchar(' ')
endsnippet
